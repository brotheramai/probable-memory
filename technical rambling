so, it looks like inkjs doesn't handle tags? like, it doesn't return them from the story object.

also, ink itself has no way to recieve input from the player.
I could take the text on the app side, set and ink variable and then the story would be able to continue using the value that I set.

there is similarly no way I know of to have ink return a different number of options.
like there are threads, which maybe could be combined with conditionals to keep accruing more options, but that's like not super helpful if the options themselves need to be varied.
like, the options could take values from variables, but again, not great really. You'd have to have a variable defined ahead of time.

so I could have priority_1 through priority_10 defined, then check if they're empty and have them show or hide as appropriate, and if I combined this with storing responses in a global variable I could maybe get inkle to handle variable numbers of user-supplied text. But like, it feels like I'd be doing a lot to make that happen and really it isn't worthwhile since I need to store user-supplied information externally anyway so that it persists between sessions.

So if I figure out how to get ink to return markup to me then I can catch it and know to either fetch custom user data and store it, or to render a specific list of options and store the selection.

man, if only ink lists were dynamic, then I could just use those.

all of this makes me think that maybe ink isn't worth it. In the end I really should get this onto phones so I can do notifications. Like browsers have those, but I can't imagine anyone uses them. Besides, we're always carrying phones in our hands, not laptops.
nevermind, I can use cordova/electron to get this app wherever I need it without issue (and while using html, css, and javascript, and therefore inkjs is still on the table as an option.)

also, I bet cordova has a built in webserver so I can undo my www-data changes
yup, it does, but it makes copies of your files, so you have to re-run the server whenever you make a change
and as an added stupidity it opens a new tab each time too.

but yeah, the other problem I'm having is that I don't have a good way to find out which bots are available.
long term I'm going to need to have a notion of a bot and specific conversations with that bot

I had the idea of a contact list that you could search through to start conversations from.

Ok, so here is my core issue. If I load them from the internet then I can have some sort of api that says "here's what's availiable", but ideally I'd want to be able to download them, but I don't know how to do that for a browser since file support is so shitty.

If I'm willing to ditch custom functions then I could save everything as json in whatever storage I am allowed.

Maybe I should release a desktop app rather than a browser app. That would ease a lot of constraints.
If I were going to make a browser app I would just have to get a server involved.
So maybe I do a limited, hardcoded 'try me below' in the github?

So I need to decide if I want to continue on the android app route. Probably, no? I mean, I definitely want to test it on my phone.


Ok, but what about updates? Do I want to do a whole build every time I update a bot?
nope.

Plus, I want to allow loading bots from 'off-reservation'
so I need a way to just get new stuff whenever.
But that should be fine using downloads.

Ok, so problem again. The file plugin is ALSO restricted in terms of where you can read/write from.
So for now I think I need to pivot to loading everything as json and just not have custom functions.
Otherwise I have to figure out how to load javascript and execute it from a directory other than the application directory.
Maybe that's fine though?
Obviously having custom functions is way more powerful, but it's also way more dangerous.
So yeah, let's say ditch that for now.

So I just have to stop using the cordova browser platform (and maybe come back for the 'try me' section)

Yeah, but the android platform requires like a whole bunch of stuff

Like, also though, I can run cordova in one terminal and then use 'cordova prepare' to update files.
It's still a two-step process, but way less bad than before!
at least for browser. Don't know if it works for electron yet.